[{"/Users/yueyangzheng/Documents/GitHub/dropsdown/dropdown/src/reportWebVitals.js":"1","/Users/yueyangzheng/Documents/GitHub/dropsdown/dropdown/src/Demo.js":"2","/Users/yueyangzheng/Documents/GitHub/dropsdown/dropdown/src/index.js":"3","/Users/yueyangzheng/Documents/GitHub/dropsdown/dropdown/src/components/Dropdown.js":"4"},{"size":362,"mtime":1611168175493,"results":"5","hashOfConfig":"6"},{"size":3850,"mtime":1611199677262,"results":"7","hashOfConfig":"6"},{"size":503,"mtime":1611203510123,"results":"8","hashOfConfig":"6"},{"size":6634,"mtime":1611203438344,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xp3iza",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/yueyangzheng/Documents/GitHub/dropsdown/dropdown/src/reportWebVitals.js",[],"/Users/yueyangzheng/Documents/GitHub/dropsdown/dropdown/src/Demo.js",["20","21"],"import {useState} from 'react'\nimport Dropdown from './components/Dropdown'\n\nimport './styles/Demo.scss'\n\nfunction Demo() {\n  const [year, setYear] = useState(null)\n  const [states, setStates] = useState([])\n  const [month, setMonth] = useState(null)\n  const [counties, setCounties] = useState([])\n  const [] = useState([])\n\n  const handleYearChange = (value) => {\n    setYear(value)\n  }\n\n  const handleStateChange = (value) => {\n    setStates(value)\n  }\n\n  const handleMonthChange = (value) => {\n    setMonth(value)\n  }\n\n  const handleCountyChange = (value) => {\n    setCounties(value)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Dropdown Demo by Adrien Zheng</h1>\n      <h2>Light Mode</h2>\n      <div className=\"card light-cont\">\n        <Dropdown value={year} onChange={handleYearChange} label=\"Select Year\">\n          {[1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003].map(year =>\n            <Dropdown.Item key={`year-${year}`} value={year}>{year}</Dropdown.Item>\n          )}\n        </Dropdown>\n        <Dropdown value={states} multiple label=\"Select States\" onChange={handleStateChange}>\n          <Dropdown.Item value={0}>New York</Dropdown.Item>\n          <Dropdown.Item value={1}>California</Dropdown.Item>\n          <Dropdown.Item value={2} disabled>New Jersey</Dropdown.Item>\n          <Dropdown.Item value={3}>Ohio</Dropdown.Item>\n          <Dropdown.Item value={4}>New Hampshire</Dropdown.Item>\n          <Dropdown.Item value={5}>New Mexico</Dropdown.Item>\n        </Dropdown>\n        <Dropdown value={null} label=\"Disabled Dropdown\" disabled>\n          <Dropdown.Item value={0}>Item 1</Dropdown.Item>\n          <Dropdown.Item value={1}>Item 2</Dropdown.Item>\n          <Dropdown.Item value={2}>Item 3</Dropdown.Item>\n          <Dropdown.Item value={3}>Item 4</Dropdown.Item>\n          <Dropdown.Item value={4}>Item 5</Dropdown.Item>\n          <Dropdown.Item value={5}>Item 6</Dropdown.Item>\n        </Dropdown>  \n      </div>\n      <h2>Dark Mode</h2>\n      <div className=\"card dark-cont\">\n        <Dropdown value={month} onChange={handleMonthChange} label=\"Select Month\" dark>\n          <Dropdown.Item value={1}>January</Dropdown.Item>\n          <Dropdown.Item value={2} disabled>February</Dropdown.Item>\n          <Dropdown.Item value={3} disabled>March</Dropdown.Item>\n          <Dropdown.Item value={4}>April</Dropdown.Item>\n          <Dropdown.Item value={5}>May</Dropdown.Item>\n          <Dropdown.Item value={6}>June</Dropdown.Item>\n          <Dropdown.Item value={7}>July</Dropdown.Item>\n          <Dropdown.Item value={8}>August</Dropdown.Item>\n          <Dropdown.Item value={9}>September</Dropdown.Item>\n          <Dropdown.Item value={10}>October</Dropdown.Item>\n          <Dropdown.Item value={11}>November</Dropdown.Item>\n          <Dropdown.Item value={12}>December</Dropdown.Item>\n        </Dropdown>\n        <Dropdown value={counties} multiple label=\"Select Counties\" onChange={setCounties} dark>\n          <Dropdown.Item value={\"Alameda County\"}>Alameda County</Dropdown.Item>\n          <Dropdown.Item value={\"Fresno County\"}>Fresno County</Dropdown.Item>\n          <Dropdown.Item value={\"Glenn County\"}>Glenn County</Dropdown.Item>\n          <Dropdown.Item value={\"San Francisco\"}>San Francisco</Dropdown.Item>\n          <Dropdown.Item value={\"Santa Clara County\"}>Santa Clara</Dropdown.Item>\n        </Dropdown>\n        <Dropdown value={null} label=\"Disabled Dropdown\" disabled dark>\n          <Dropdown.Item value={0}>Item 1</Dropdown.Item>\n          <Dropdown.Item value={1}>Item 2</Dropdown.Item>\n          <Dropdown.Item value={2}>Item 3</Dropdown.Item>\n          <Dropdown.Item value={3}>Item 4</Dropdown.Item>\n          <Dropdown.Item value={4}>Item 5</Dropdown.Item>\n          <Dropdown.Item value={5}>Item 6</Dropdown.Item>\n        </Dropdown>  \n      </div>\n    </div>\n  );\n}\n\nexport default Demo;\n","/Users/yueyangzheng/Documents/GitHub/dropsdown/dropdown/src/index.js",[],"/Users/yueyangzheng/Documents/GitHub/dropsdown/dropdown/src/components/Dropdown.js",["22"],"import {useState, useEffect, useRef} from 'react'\nimport {CSSTransition} from 'react-transition-group'\n\nimport '../styles/Dropdown.scss'\n\nexport default function Dropdown({label, value, multiple, children, onChange, dark, disabled}) {\n\n  //The Dropdown is a controlled component, which takes following props:\n  //label: The label above the dropdown that explains its purpose, optional (intended for improved accessablity).\n  //value: The internal value(s) of the selected item(s), hidden from the users.\n  //multiple: Determines whether multiple items can be selected at the same time, default to false.\n  //          Multiple also enable an additional options \"ALL\" that allows user to select/deselect all items.\n  //onChange: The callback function triggered when the selection changes.\n  //disabled: When set to true, the dropdown becomes disabled and ignores all user interactions, default to false.\n  //dark: When set to true, the dropdown will be rendered with a dark theme, default to false.\n  //children: The options within the dropdown, must wirtten as the <Dropdown.Item /> component defined at the end.\n\n  const [focus, setFocus] = useState(false) // state that contorls the visibility of the options, when focus === true, the options show up\n\n  const options = {}\n  children.forEach(({props: {value, children}}) => {\n    options[value] = children\n  }) // turn the children prop into a hashtable (an Object that maps each child's value to its displayed name)\n\n  const dropdown = useRef(null) //ref that points to the ul element that renders all the options\n\n  useEffect(() => {\n    //when the options show up, add an event listener to the document, which listens to the next click event outside\n    //the ul element that contains all the options so that the options collapes when users click outside.\n    function handleClickOutside(event) {\n      // event.stopImmediatePropagation()\n      if(dropdown.current && !dropdown.current.contains(event.target)) {\n        setFocus(false)\n      }\n    }\n    document.addEventListener('click', handleClickOutside)\n    return () => {\n      document.removeEventListener('click', handleClickOutside)\n    }\n  }, [dropdown])\n\n  const handleItemClick = (newValue) => {\n    // the callback function passed to each option that returns the option's value whenever it is clicked\n    // it will then call the onChange callback to inform the parent component that the value(s) has changed\n    if(onChange !== undefined) {\n      if(multiple) {\n        // if the dropdown allows multiple selection, return the list of updated selected value\n        let ar = []\n        let exist = false\n        value.forEach(val => {\n          if (newValue === val) {\n            exist = true\n          } else {\n            ar.push(val)\n          }\n        })\n        if(!exist) {\n          ar.push(newValue)\n        }\n        onChange(ar)\n      } else {\n        // otherwise, returns the new value\n        onChange(newValue)\n      }\n    }\n  }\n\n  const selectAll = () => {\n    let ar = []\n    children.forEach(({props}) => {\n      if (!props.disabled) {\n        ar.push(props.value)\n      }\n    })\n    onChange(ar)\n  }\n\n  const deselectAll = () => {\n    onChange([])\n  }\n\n  const allSelected = () => {\n    if(children.filter(child => {\n      if(!child.props.disabled) {\n        return true\n      }\n    }).length === value.length) {\n      return true\n    }\n    return false\n  }\n\n  return (\n    <div ref={dropdown} className={`dropdown ${dark ? 'dark' : 'light'} ${disabled ? 'disabled' : ''}`} onClick={() => setFocus(true)}>\n      {label && <label \n        id={label && label.split(' ').join('-')}\n        className={((!multiple && value !== null) || (multiple && value.length>0)) ? \"floated\" : undefined}\n      >{label}</label>}\n      <div aria-labelledby={label ? label.split(' ').join('-') : undefined} className='input-cont'>\n        <input\n          value={multiple ? value.map(val => options[val]).join(', ') : (options[value] || \"\")}\n          readOnly\n        />\n        <svg version=\"1.1\" viewBox=\"0 0 960 560\" className={focus ? 'left' : ''}>\n          <path d=\"M480,344.181L268.869,131.889c-15.756-15.859-41.3-15.859-57.054,0c-15.754,15.857-15.754,41.57,0,57.431l237.632,238.937\n            c8.395,8.451,19.562,12.254,30.553,11.698c10.993,0.556,22.159-3.247,30.555-11.698l237.631-238.937\n            c15.756-15.86,15.756-41.571,0-57.431s-41.299-15.859-57.051,0L480,344.181z\"/>\n        </svg>\n      </div>\n      <div>\n        <CSSTransition in={focus} timeout={300} classNames=\"item\" unmountOnExit>\n          <ul className=\"options\" aria-labelledby={label ? label.split(' ').join('-') : undefined}>\n            {multiple && <li className=\"option all\"  onClick={allSelected() ? deselectAll : selectAll}>\n              <div>ALL</div>\n              <div className={`disc square ${allSelected() ? \"selected\" : \"\"}`}>\n                <div className=\"disc-dot\"></div>\n              </div>\n            </li>}\n            {children.map(({props}) => {\n              return <Dropdown.Item\n                {...props}\n                key={props.value}\n                onItemClick={handleItemClick}\n                selected={multiple ? value.includes(props.value) : props.value === value}\n                checkBox={multiple}\n              />\n            })}\n          </ul>\n        </CSSTransition>\n      </div>\n    </div>\n  )\n}\n\nDropdown.Item = ({value, children, onItemClick, selected, checkBox, disabled}) => {\n  //Dropdown.Item is a controlled component that renders the individual option within the dropdown.\n  //It takes the following props:\n  //value: the internal value of the item that is not displayed to the users.\n  //children: the label of the option that is visible to the users.\n  //onItemClick: the callback function passed to the item that returns the internal value of the item to the parent dropdown component.\n  //selected: determines whether the option should appear checked.\n  //checkBox: determines whether the option should come with a disk or a checkBox.\n  //disabled: when set to true, the option becomes disabled and ignores all user interactions, default to false.\n\n  //among the props above, onItemClick, selected, and checkbox are handled automatically by the parent Dropdown component, and developers should not manipulate them by providing their own values.\n\n  return (\n    <li className={`option ${disabled ? \"disabled\" : \"\"}`}\n      value={value}\n      onClick = {() => onItemClick(value)}\n    >\n      <div>{children}</div>\n      <div className={`disc ${checkBox ? \"square\" : \"\" } ${selected ? \"selected\" : \"\"}`}>\n        <div className=\"disc-dot\"></div>\n      </div>\n    </li>\n  )\n}",{"ruleId":"23","severity":1,"message":"24","line":11,"column":9,"nodeType":"25","messageId":"26","endLine":11,"endColumn":11},{"ruleId":"27","severity":1,"message":"28","line":25,"column":9,"nodeType":"29","messageId":"30","endLine":25,"endColumn":27},{"ruleId":"31","severity":1,"message":"32","line":83,"column":30,"nodeType":"33","messageId":"34","endLine":83,"endColumn":32},"no-empty-pattern","Unexpected empty array pattern.","ArrayPattern","unexpected","no-unused-vars","'handleCountyChange' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd"]